{"componentChunkName":"component---src-templates-tags-template-js","path":"/tags/refactoring/","result":{"data":{"allMarkdownRemark":{"totalCount":2,"nodes":[{"fields":{"slug":"/blog/refactoring-chapter-7/"},"frontmatter":{"date":"February 07, 2024","description":"객체 종류를 나타내는 분류코드를 int 같은 기본타입으로 표현하면 타입판별이 제대로 안됩니다. 분류코드를 나타내는 클래스를 만들고 타입판별이 되게해봅시다.","tags":["refactoring","2024"],"title":"Refactoring Chapter 7"},"excerpt":"리팩토링 분류 코드를 클래스로 치환 As-Is Item 이라는 객체가 있습니다 item의 타입을 static 변수로 생성하여 객체 생성 시 넣어줍니다. 이렇게 타입을 int 로 설계할 경우 이렇게도 객체를 생성할 수 있습니다.…"},{"fields":{"slug":"/blog/refactoring-chapter-8/"},"frontmatter":{"date":"February 07, 2024","description":"분류코드마다 객체동작을 바꾸고 싶다면 하위클래스를 이용한 다형적 메서드를 만듭니다.","tags":["refactoring","2024"],"title":"Refactoring Chapter 8"},"excerpt":"리팩토링 분류 코드를 하위 클래스로 치환 단순히 객체를 식별하는 것뿐만 아니라 분류 코드 종류에 따라 객첵 다른 동작을 한다면 클래스로 치환하는 것 만으로 쉽게 해결할 수 없습니다. As-Is Shape 클래스는 도형을 나타냅니다. getName…"}]}},"pageContext":{"tag":"refactoring"}},"staticQueryHashes":["2714594843","3159585216"]}